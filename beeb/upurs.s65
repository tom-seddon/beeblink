;-------------------------------------------------------------------------
;
; BeebLink - BBC Micro file storage system
;
; Copyright (C) 2019, 2020 Tom Seddon
;
; Parts of this file copyright Martin Barr (stardot: MartinB), Stephen
; Harris (stardot: sweh), David Banks (stardot: hoglet)
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program. If not, see
; <https://www.gnu.org/licenses/>.
;
;-------------------------------------------------------------------------

upurs: .block

; txdp: .macro items
;                 ; .debug_print \items
; .endm

;-------------------------------------------------------------------------

                .virtual link_upurs_via
via: .dstruct VIA
                .endv
                
;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

                .section nmi_workspace
                
                ; offset from serbuf of next byte to read.
serbuf_index:
                .fill 1

                ; num bytes in serbuf, or $00 if serbuf empty.
serbuf_size:
                .fill 1

old_acr:
                .fill 1

old_x:
                .fill 1
                
timeout_counter:
                .fill 2
                
                .send nmi_workspace

;-------------------------------------------------------------------------
;

serbuf_max_size=70

; The UPURS receive routine receives (and rightly so...) as many bytes
; as are being sent. If the sender keeps sending for a while after CTS
; is dropped, that needs to be handled.
;
; So, book a portion of the buffer for overrun. Drop CTS when the
; overrun area is reached, and the sender can send up to overrun_size
; more bytes without it being a problem.
; 
; The typical overrun with my Mac appears to be 1 byte. (Drop CTS
; while receiving a byte, and you get 1 more byte again.) 8 is
; hopefully generous.

serbuf_overrun_size=8

                .section nmi_area
                .fill 1         ;RTI

                ; don't use the link startup workspace for this stuff
                ; - leave open the option of re-syncing as part of
                ; another request, without trampling on $a8...$af (OK
                ; if part of a * command, but not for OS calls)
num_sync_zeros_received:
                .fill 2
startup_counter:
                .fill 2
serbuf:
                .fill serbuf_max_size
                .send nmi_area

;-------------------------------------------------------------------------
;
; Serial sync process.
;

startup: .proc
                jsr prepare_without_restart

                ; lda #%11111111
                ; sta via.ddrb
                ; sta via.orb

                ; lda #%01111101
                ; sta via.ddrb
                ; sta via.orb

                jsr startup2

                php
                pha
                jsr unprepare
                pla
                plp
                rts

startup2:
                
; During service call 3, IRQs appear to be disabled. So the startup
; process doesn't check the system clock - it just counts number of
; iterations of each of the various initialisation loops, and classes
; it as a timeout if some maximum number of iterations is exceeded.

                lda #4
                jsr reset_startup_counter
                
start_sync:
                lda #0
                sta num_sync_zeros_received+0
                sta num_sync_zeros_received+1

                .block
                .debug_print ['Sync step 0...\r\n']
                lda #$80
                jsr send_byte_with_timeout
                bcc +

                ldx #status_text.sync_timed_out_0-status_text
                sec             ;no good
                rts

+
                .bend

                .block
                .debug_print ['Sync step 1...\r\n']
                lda #255
                jsr reset_startup_counter
sync_step_1_loop:
; .print ['&00: sent: &',num_sync_zeros_sent+1,num_sync_zeros_sent+0,'; received: &',num_sync_zeros_received+1,num_sync_zeros_received+0,'\r\n']
                ldy #status_text.sync_timed_out_1-status_text
                jsr check_startup_counter

                ; Try to write $00. If it didn't get sent, no
                ; problem... plenty more where that came from.
                lda #$00
                jsr send_byte
                
                ; Try to get more data. If none available, just carry
                ; on looping.
                jsr recv_byte
                bcc sync_step_1_loop

                ; If a non-0 was received, restart the sync process.
                cmp #0
                bne start_sync

                ; Count one more zero received.
                inc num_sync_zeros_received+0
                bne +
                inc num_sync_zeros_received+1
+

                .debug_print ['Got step 1 zeroes: &',num_sync_zeros_received+1,num_sync_zeros_received+0,'\r\n']

                ; Keep going if required number not reached.
                lda num_sync_zeros_received+0
                cmp #<NUM_SERIAL_SYNC_ZEROS
                bne sync_step_1_loop

                lda num_sync_zeros_received+1
                cmp #>NUM_SERIAL_SYNC_ZEROS
                bne sync_step_1_loop
                .bend

                .block
                ; Keep reading until the 1 byte is received. Continue
                ; sending zeros meanwhile.
                .debug_print ['Sync step 2...\r\n']
                lda #16
                jsr reset_startup_counter
sync_step_2_loop:
                ldy #status_text.sync_timed_out_2-status_text
                jsr check_startup_counter

                lda #$00
                jsr send_byte

                jsr recv_byte
                bcc sync_step_2_loop

                cmp #0
                beq sync_step_2_loop

                cmp #1
                bne failed
                .bend

                ; Send a single non-zero byte.
                .debug_print ['Sync step 3...\r\n']
                lda #$01
                jsr send_byte
ok:
                .debug_print ['Sync success (probably)\r\n']
                clc             ;good
                rts

failed:
                ldx #status_text.sync_failed-status_text
                sec             ;no good
                rts

                ; A = counter/256
reset_startup_counter:
                eor #$ff
                clc
                adc #1
                sta startup_counter+1
                lda #0
                sta startup_counter+0
                rts
                
check_startup_counter:
                inc startup_counter+0
                bne +
                inc startup_counter+1
+
                bne +
                ; naughty hack - return to whatever called startup2
                ; with C=1 and X set to the error offset.
                pla
                pla
                tya
                tax
                ; ldx #status_text.sync_timed_out-status_text
                sec
+
                rts

                
                
                .pend

status_text: .block
sync_failed:
                .text 'Sync failed',0
sync_timed_out_0:
                .text 'Sync timeout (step 0)',0
sync_timed_out_1:
                .text 'Sync timeout (step 1)',0
sync_timed_out_2:
                .text 'Sync timeout (step 2)',0
; sync_timed_out_3:
;                 .text 'Sync timeout (step 3)',0
                .bend

;-------------------------------------------------------------------------
;
; Prepare link. Restart if the connection seems broken.
;
; Preserve A/X/Y.
;
prepare_with_restart: .proc
random_number=$98               ;chosen at random
                
                jsr prepare_without_restart

                pha
                txa
                pha
                tya
                pha

                ; send a test command, to see if server is still
                ; listening.
                
                lda #REQUEST_ECHO_DATA
                jsr send_byte

                lda #random_number
                jsr send_byte

                ; send status byte
                lda #1
                jsr send_byte

                ; receive byte. Restart if timeout or not
                ; RESPONSE_DATA with 1-byte payload.
                jsr recv_byte_with_timeout
                bcc restart
                cmp #RESPONSE_DATA
                bne restart

                jsr recv_byte_with_timeout
                bcc restart
                cmp #random_number
                bne restart

                jsr recv_byte_with_timeout
                bcc restart
                cmp #1
                bne restart


prepared:
                ; link is good.
                pla
                tay
                pla
                tax
                pla
                clc
                rts

; Restart.
restart:
                jsr startup.startup2
                bcc prepared
                rts

recv_byte_with_timeout:
                ldy #0
-
                jsr recv_byte
                bcs +
                iny
                bne -
+
                rts
                
                .pend

;-------------------------------------------------------------------------
; 
; Prepare link. Get everything ready and put it in send mode.
;
; Preserve A/X/Y.
; 
prepare_without_restart: .proc
                pha
                txa
                pha
                tya
                pha
                
                jsr claim_nmi
                
                lda #0
                sta serbuf_index
                sta serbuf_size

                ; lda via.acr
                ; sta old_acr

                ; No port B latching. Disable PB7 output.
                lda #$00
                sta via.acr

                ; lda #%11111111
                ; sta via.ddrb
                ; sta via.orb

                lda #%01111101
                sta via.ddrb
                lda #%01111100
                sta via.orb

                pla
                tay
                pla
                tax
                pla
                rts
                .pend

;-------------------------------------------------------------------------
;
; Begin send.
;

begin_send_with_restart:
                jsr prepare_with_restart
                bcc begin_send
                rts

begin_send_without_restart:
                jsr prepare_without_restart
                ; fall through to begin_send

begin_send: .block
                pha             ;save packet type

                stx old_x

                lda payload_counter+0
                cmp #1
                bne n_bytes

                lda payload_counter+1
                ora payload_counter+2
                ora payload_counter+3
                bne n_bytes

                pla             ;restore packet type
                and #$7f        ;clear the N-byte bit
                bpl finish      ;JMP, in effect

n_bytes:
                pla             ;restore packet type
                ora #$80        ;set the N-byte bit
                jsr send_byte

                lda payload_counter+0
                jsr send_byte

                lda payload_counter+1
                jsr send_byte
                
                lda payload_counter+2
                jsr send_byte

                lda payload_counter+3                
finish:
                jsr send_byte
                ldx old_x
                clc
                rts
                .bend                

;-------------------------------------------------------------------------
;
; Begin recv.
;

begin_recv: .proc
                stx old_x

                jsr recv        ;receive packet type

                cmp #$80        ;C=1 if N-byte
                and #$7f
                bcs n_bytes

                ldx old_x
                jmp set_payload_counter_1

n_bytes:
                pha

                jsr recv
                sta payload_counter+0

                jsr recv
                sta payload_counter+1

                jsr recv
                sta payload_counter+2

                jsr recv
                sta payload_counter+3

                pla

                ldx old_x
                rts

recv:
                jsr recv_byte
                bcc recv
                rts
                
                .pend
                
;-------------------------------------------------------------------------
;
; Unrepare link. Do whatever's necessary.
; 
unprepare: .proc
                pha
                txa
                pha
                tya
                pha
                
                ; lda old_acr
                ; sta via.acr
                
                jsr release_nmi
                
                pla
                tay
                pla
                tax
                pla
                rts
                .pend


; ;-------------------------------------------------------------------------
; ;
; ; Put prepared link in receive mode.
; ; 
; begin_recv: .proc
;                 rts
;                 .pend

; ;-------------------------------------------------------------------------
; ;
; ; Send 1 byte over the link as part of the header: the type byte, or
; ; one of the size bytes.
; ;
; ; Preserve X/Y.
; ; 
; send_header_byte: .proc
;                 stx old_x
;                 jsr send_byte
;                 ldx old_x
;                 rts
;                 .pend
                
;-------------------------------------------------------------------------
; 
; Send 1 byte over the link as part of the payload. 
; payload_counter is the byte's negated offset.
;
; Preserve X/Y.
; 
send_payload_byte: .proc
                stx old_x

                ; send payload byte
                jsr send_byte

                ; send status byte?
                lda payload_counter+0
                bne +

                lda #1
                jsr send_byte

+
                ldx old_x
                rts
                .pend
                
;-------------------------------------------------------------------------
;
; Receive 1 byte over the link as part of the payload.
; payload_counter is the byte's negated offset.
;
; Preserve X/Y.
;
recv_payload_byte: .proc
                stx old_x

                lda payload_counter+0
                beq recv_status_byte

-
                jsr recv_byte
                bcc -
                
                ldx old_x
                rts

recv_status_byte:
                jsr recv_byte
                pha

-
                jsr recv_byte
                bcc -

                pla
                ldx old_x
                rts
                .pend

;-------------------------------------------------------------------------
;
; macro to generate UPURS byte send.
;
; entry: X = byte to send
; preserves: Y
;
upurs_send_byte: .macro
                lda     #1
                sta     via.orb
                nop             ; (2)
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   start bit (9 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   bit 0 (8 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                nop             ; (2)
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   bit 1 (9 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                nop             ; (2)
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   bit 2 (9 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   bit 3 (8 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                nop             ; (2)
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   bit 4 (9 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                nop             ; (2)
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   bit 5 (9 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                txa             ; (2)
                ror     a       ; (2)
                tax             ; (2)   bit 6 (8 us)
                lda     #0      ; (2)
                adc     #0      ; (2)
                sta     via.orb ; (6)
 
                nop             ; (2)
                nop             ; (2)
                nop             ; (2)   bit 7 (9 us)
                nop             ; (2)
                nop             ; (2)
                lda     #0      ; (2) 
                sta     via.orb ; (6) stop bit
                .endm

;-------------------------------------------------------------------------
;
; transfer byte via UPURS, with timeout.
;
; entry: A = byte to send
; exit: C=0 = byte sent
;       C=1 = timed out
; preserves: Y
;
send_byte_with_timeout: .proc

                php
                sei

                eor #$ff
                tax

                ; test PC RTS
                lda via.irb
                and #$02
                bne send

                ; Each iteration = ~18 cycles, so this means a timeout
                ; of approx half a second.
                lda #0
                sta timeout_counter+0
                sta timeout_counter+1

                ; .debug_print ["Timeout: &",timeout_counter+1,timeout_counter+0,"\r\n"]
                
wait_for_rts:
                lda via.irb
                and #$02
                bne got_rts

                inc timeout_counter+0
                bne wait_for_rts

                inc timeout_counter+1
                
                ; .debug_print ["Timeout counter: &",timeout_counter+1,timeout_counter+0,"\r\n"]                
                bne wait_for_rts

                ; timed out.
                ; .debug_print ["Timed out\r\n"]
                plp
                sec
                rts

got_rts:
                lda #$f0
                clc
-
                adc #$01
                bcc -

send:
                .upurs_send_byte

                plp
                clc
                rts
                
                .pend
                
;-------------------------------------------------------------------------
; 
; transfer byte via UPURS. 64tass'd version of code from UPURSFS.
;
; entry: A = byte to send
; exit:
; preserves: Y

                .align 256
send_byte: .proc
                php
                sei

                eor #$ff
                tax

                ; test PC RTS
                lda via.irb
                and #$02
                bne send

wait_for_rts:
                lda via.irb
                and #$02
                beq wait_for_rts

got_rts:
                lda #$f0
                clc
delay_after_rts:
                adc #$01
                bcc delay_after_rts

send:
                .upurs_send_byte

                plp
                rts
                
                .pend

;-------------------------------------------------------------------------
;
; receive a byte via UPURS.
;
; Fastest path through this routine is 30 cycles.
;
; entry:
; exit: C=1, A = byte read
;       C=0 if no data
; preserves: Y
;
                .align 256
recv_byte: .proc
                lda serbuf_size
                beq refill
got_bytes:
                ldx serbuf_index
                lda serbuf,x
                inx
                cpx serbuf_size
                bcs exhausted

                stx serbuf_index
                sec
                rts

exhausted:
                ldx #0
                stx serbuf_size
                stx serbuf_index
                sec
                rts

refill:
                tya
                pha
                jsr fill_serbuf
                pla
                tay
                
                lda #0
                sta serbuf_index
                
                lda serbuf_size
                bne got_bytes
                
                clc
                rts
                .pend

;-------------------------------------------------------------------------
;
; fill serial buffer via UPURS. 64tass'd version of code from UPURSFS.
; 
; further ideas:
;
; 1. do the bit inversions as part of the read - looks like there's
; enough dead time? [done]
;
; 2. add a second copy of sb...T0 after the bit reading, to avoid the
; jmp - squeeze the eor #$ff in there instead?
;
; exit: ?serbuf_size = bytes read

                
                .align 256
                
fill_serbuf: .proc
                php
                sei             ; disable interrupts (critical!)
                ldy #0          ; reset buffer pointer
                lda #$40        ; assert CTS
                sta via.irb 
idle:
                lda via.irb     ; wait for Tx line idle (low)
                bmi idle

sb:
                .rept 12        ;
                lda via.irb     ; and wait for start bit
                bmi T0		; via detection delay list 
                .next

                ; If no start bit detected drop CTS but continue
                ; looking for start bit
                ; 
                ; Using ASL is the faster way to drop CTS while
                ; continuing to sample
                ; 
                ; The alternative, using LDA then STA, would take 2
                ; extra cycles
                ; 
                ; branching to T1/T2 compensates for additional cycles
                ; already consumed interleaving the ASL/BCS and
                ; LDA/BMI reduces the worst case sampling interval
                ; from 6us to 5us. (i.e. 4,6,4,4 becomes 4,5,5,4)
                asl via.irb     ; (3 + 7)
                lda via.irb     ; (3 + 3)
                bcs T3		; (2) or (3)
                bmi T2		; (2) or (3)
                lda via.irb     ; (3 + 3)
                bmi T1		; (2) or (3)
                .rept 10
                lda via.irb     ; (3 + 3)
                bmi T0		; (2) or (3)
                .next
                sty serbuf_size
                plp
                rts             ; and return 

                ; To implement n byte buffer, CTS is turned off after
                ; buf top is reached
                ; 
                ; This section is exactly 15 cycles, like the original
                ; code, but only ever drops CTS.

T0:

                ; see note about serbuf_overrun_size. 
                cpy #serbuf_max_size-serbuf_overrun_size ; (2)  (2)
T1:
                bcs xcts        ; (2)  (3)
T2:
                nop             ; (2)
                nop             ; (2)
                nop             ; (2)
T3:
                lda #0		; (2)
                beq xskip       ; (3)
xcts:
                nop             ;      (2)
                lda #0		;      (2)
                sta via.irb     ;      (4 + 2)
xskip:				; (15) (15)
                
; sequential bit reads

                ;bit 0 +12
                ldx via.irb
                cpx #$80
                ror a
                nop
                nop
                nop
                nop

                ; bit 1 +12
                ldx via.irb
                cpx #$80
                ror a
                nop
                nop
                nop
                nop
                
                ;bit 2 +10
                ldx via.irb
                cpx #$80
                ror a
                nop
                nop
                nop
                
                ;bit 3 +12
                ldx via.irb
                cpx #$80
                ror a
                nop
                nop
                nop
                nop
                
                ;bit 4 +10
                ldx via.irb
                cpx #$80
                ror a
                nop
                nop
                nop
                
                ;bit 5 +12
                ldx via.irb
                cpx #$80
                ror a
                nop
                nop
                nop
                nop
                
                ;bit 6 +10
                ldx via.irb
                cpx #$80
                ror a
                nop
                nop
                iny             ;bump buffer pointer

                ; bit 7 +...
                ldx via.irb
                cpx #$80
                ror a
                eor #$ff

                ; Note that buffer index is pre-incremented. But fold
                ; the -1 into the address here. Don't start X at $ff,
                ; because of the bcs above.
                
                sta serbuf-1,y	; save byte in buffer
                jmp sb		; and loop for next byte start bit
                .pend
                
;-------------------------------------------------------------------------

recv_file_data_host: .proc
                jsr negate_payload_counter

                lda payload_counter+0
                beq got_bytes

                ldy #0
recv_bytes:
                jsr recv_byte
                bcc recv_bytes

                sta (payload_addr),y
                iny
                dec payload_counter+0
                bne recv_bytes

                ldx #payload_addr
                jsr addyz16

-
                jsr recv_byte
                bcc -

got_bytes:
                jsr test_payload_counter
                beq got_pages

                jsr negate_payload_counter

                ldy #0

recv_pages:
                jsr recv_byte
                bcc recv_pages

                sta (payload_addr),y
                iny
                bne recv_pages

-
                jsr recv_byte
                bcc -

                inc payload_addr+1
                
                inc payload_counter+1
                bne recv_pages
                inc payload_counter+2
                bne recv_pages
                inc payload_counter+3
                bne recv_pages

got_pages:
                rts
                
                .pend

;-------------------------------------------------------------------------

recv_file_data_parasite: .proc
                jsr claim_tube
                
                jsr negate_payload_counter

                ldx #<payload_addr
                ldy #>payload_addr
                lda #tube_multi_byte_host_to_parasite
                jsr $406

                ldy payload_counter+0
                beq got_bytes

recv_bytes:
                jsr recv_byte
                bcc recv_bytes

-
                bit $fee4
                bvc -
                
                sta $fee5

                dey
                bne recv_bytes

-
                jsr recv_byte
                bcc -

                lda #0
                sta payload_counter+0
got_bytes:
                jsr test_payload_counter
                beq got_pages

                jsr negate_payload_counter

recv_pages:
                jsr recv_byte
                bcc recv_pages

-
                bit $fee4
                bvc -

                sta $fee5

                iny
                bne recv_pages

-
                jsr recv_byte
                bcc -
                
                inc payload_counter+1
                bne recv_pages
                inc payload_counter+2
                bne recv_pages
                inc payload_counter+3
                bne recv_pages

got_pages:
                jsr release_tube
                rts
                .pend

;-------------------------------------------------------------------------

send_file_data_host: .proc
                jsr negate_payload_counter

                lda payload_counter+0
                beq sent_bytes

                ldy #0
send_bytes:
                lda (payload_addr),y
                jsr send_byte

                iny
                dec payload_counter+0
                bne send_bytes

                ldx #payload_addr
                jsr addyz16
                
                ; send status byte
                lda #$01
                jsr send_byte

sent_bytes:
                jsr test_payload_counter
                beq sent_pages

                jsr negate_payload_counter

                ldy #0
send_pages:
                lda (payload_addr),y
                jsr send_byte

                iny
                bne send_pages

                lda #$01
                jsr send_byte

                inc payload_addr+1

                inc payload_counter+1
                bne send_pages
                inc payload_counter+2
                bne send_pages
                inc payload_counter+3
                bne send_pages

sent_pages:
                rts
                
                .pend

;-------------------------------------------------------------------------

send_file_data_parasite: .proc
                jsr claim_tube

                jsr negate_payload_counter

                ldx #<payload_addr
                ldy #>payload_addr
                lda #tube_multi_byte_parasite_to_host
                jsr $406

                ldy payload_counter+0
                beq sent_bytes

send_bytes:
                bit $fee4
                bpl send_bytes
                lda $fee5

                jsr send_byte

                dey
                bne send_bytes

                lda #$01
                jsr send_byte

                lda #0
                sta payload_counter+0

sent_bytes:
                jsr test_payload_counter
                beq sent_pages

                jsr negate_payload_counter

send_pages:
                bit $fee4
                bpl send_pages
                lda $fee5

                jsr send_byte

                iny
                bne send_pages

                lda #$01
                jsr send_byte
                
                inc payload_counter+1
                bne send_pages
                inc payload_counter+2
                bne send_pages
                inc payload_counter+3
                bne send_pages

sent_pages:
                jsr release_tube
                rts
                .pend

;-------------------------------------------------------------------------

                .bend
                
;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

link_beeb_name='UPURS '..format("%04x",upurs.via)
link_beeb_type=LINK_BEEB_TYPE_UPURS

;link_prepare=upurs.prepare
;link_prepare_and_maybe_restart=upurs.prepare_and_maybe_restart
; link_prepare_and_maybe_restart_unprepare=upurs.unprepare

link_begin_send_with_restart=upurs.begin_send_with_restart
link_begin_send_without_restart=upurs.begin_send_without_restart

link_begin_recv=upurs.begin_recv

;link_send_header_byte=upurs.send_header_byte
link_send_payload_byte=upurs.send_payload_byte
;link_recv_header_byte=upurs.recv_header_byte
link_recv_payload_byte=upurs.recv_payload_byte

link_unprepare=upurs.unprepare
                
link_startup=upurs.startup
link_status_text=upurs.status_text
                
link_send_file_data_parasite=upurs.send_file_data_parasite
link_send_file_data_host=upurs.send_file_data_host

link_recv_file_data_parasite=upurs.recv_file_data_parasite
link_recv_file_data_host=upurs.recv_file_data_host

link_num_speedtest_iterations=4
