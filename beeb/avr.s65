;-------------------------------------------------------------------------
;
; BeebLink - BBC Micro file storage system
;
; Copyright (C) 2018, 2019, 2020 Tom Seddon
; 
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program. If not, see
; <https://www.gnu.org/licenses/>.
;
;-------------------------------------------------------------------------
; Random notes
;-------------------------------------------------------------------------
;
; The little handshaking loops that wait for IFR bit 4 to become set
; only ever seem to run for one iteration - as intended, because the
; AVR is fast and the 6502 can't do back-to-back reads that quickly.
;
; Could probably do the check once every 256 bytes in the pagewise
; mode...? Not sure I'm brave enough for that though.
;
;-------------------------------------------------------------------------

                .section link_workspace
scratch_old_acr: .fill 1
                .send link_workspace

;-------------------------------------------------------------------------

                .weak
; In principle, it ought to work with multiple user ports. Might even
; be possible to fix it up for port A...
link_avr_via=$fe60
                .endweak
                
avr: .block

via=link_avr_via
                
;-------------------------------------------------------------------------
;
; prepare VIA for sending.
;
; preserves: X; Y; C
via_prepare: .proc
                lda via+11
                sta scratch_old_acr
                and #%01100001  ;TxxSSSLx - T = disable PB7 toggle, S
                                ;= disable shift register, L = disable
                                ;port B latching
                sta via+11
                
                lda #$18
                sta via+14      ;disable CB1+CB2 IRQs
                sta via+13      ;acknowledge any pending such IRQs

                lda via+11
                ora #2          ;enable port B input latching
                sta via+11

                lda via+12
                and #$0f
                ora #$e0        ;CB2=1, CB1 -ve edge
                sta via+12

                lda via+12
                and #$0f
                ora #$80        ;CB2=1, handshake mode, CB1 -ve edge
                sta via+12

                lda #255
                sta via+2

                rts
                .pend
;-------------------------------------------------------------------------

begin_send: .proc
                pha             ;save packet type
                
                jsr via_prepare
                
                lda payload_counter+0
                cmp #1
                bne n_bytes

                lda payload_counter+1
                ora payload_counter+2
                ora payload_counter+3
                bne n_bytes

                pla             ;restore packet type
                and #$7f
                jsr send_byte

                clc
                rts

n_bytes:
                pla
                ora #$80
                jsr send_byte

                lda payload_counter+0
                jsr send_byte

                lda payload_counter+1
                jsr send_byte
                
                lda payload_counter+2
                jsr send_byte

                lda payload_counter+3
                jsr send_byte

                clc
                rts

                .pend

;-------------------------------------------------------------------------

begin_recv: .proc
                lda #0
                sta via+2

                jsr recv_byte

                bpl set_payload_counter_1

                and #$7f
                pha

                jsr recv_byte
                sta payload_counter+0

                jsr recv_byte
                sta payload_counter+1

                jsr recv_byte
                sta payload_counter+2

                jsr recv_byte
                sta payload_counter+3

                pla
                rts
                
                .pend
                
;-------------------------------------------------------------------------
;
; The opposite of via_prepare, setting it up again for non-use.
; 
via_unprepare: .proc
                lda via+12
                and #$1f
                ora #$e0        ;CB2=1
                sta via+12

                lda scratch_old_acr
                sta via+11
                
                rts
                .pend

;-------------------------------------------------------------------------
;
; Send byte. *Call prepare_via_for_send first.*
;
; preserves: X; Y; C
; 
send_byte: .proc
                sta via+0       ;set ORB
loop:
                lda via+13
                and #$10        ;wait for CB1 IRQ
                beq loop
                rts
                .pend

;-------------------------------------------------------------------------
;
; Receive byte. *Call prepare_via_for_recv first.*
;
; exit: A = byte read
;       N, Z = set as per byte read
; preserves: X; Y; C
; takes: ~25 cycles best case
recv_byte: .proc
                sta via+0       ;write something into ORB, anything,
                                ;to set the handshaking off
loop:
                lda via+13
                and #$10
                beq loop
                lda via+0
                rts
                .pend
                
;-------------------------------------------------------------------------
;
; Get and print current AVR status.
;
; exit: C=0 if OK
;       C=1 if not ready

; ; A=BEEBLINK_STATUS_NO_AVR - AVR not present
; ;       A=BEEBLINK_STATUS_AVR_NOT_READY - AVR present, but not ready
; ;       A=BEEBLINK_STATUS_NO_SERVER - AVR ready but server not connected
; ;       A=BEEBLINK_STATUS_OK (0) - all systems (apparently) go

; BEEBLINK_STATUS_OK=0
; BEEBLINK_STATUS_NO_AVR=1
; BEEBLINK_STATUS_WRONG_PROTOCOL=2
; BEEBLINK_STATUS_AVR_NOT_READY=3
; BEEBLINK_STATUS_NO_SERVER=4
; BEEBLINK_STATUS_OK=4

; beeblink_status_strings: strings_list ["no AVR","protocol not "..format("%02X",AVR_PROTOCOL_VERSION),"AVR not ready","no server","OK"]

status_text: .block
no_avr:
                .text "No AVR",0
avr_not_ready:
                .text "AVR not ready",0
wrong_protocol:
                .text "Protocol not ",format("%02X",AVR_PROTOCOL_VERSION),0
                .bend
                
link_startup: .proc
                jsr reset
                
                jsr via_prepare
                
                lda #REQUEST_AVR_PRESENCE

                ; send byte with timeout
                sta via+0
                ldx #0
-
                lda via+13
                and #$10
                bne +
                inx
                bne -

+
                cmp #$10
                beq check_avr_ready

                ldx #status_text.no_avr-status_text
                sec
                rts

check_avr_ready:
                lda #REQUEST_AVR
                ldx #REQUEST_AVR_READY
                jsr send_request_1_without_restart

                jsr recv_response

                tay                   ;Y = response
                
                jsr recv_payload_byte ;A = protocol version
                bcc wrong_protocol    ;bleargh

                jsr discard_remaining_payload

                cmp #AVR_PROTOCOL_VERSION
                beq check_avr_ready_2

wrong_protocol:
                ldx #status_text.wrong_protocol-status_text
                sec
                rts

check_avr_ready_2:
                cpy #RESPONSE_YES
                beq avr_ready

                ldx #status_text.avr_not_ready-status_text
                sec
                rts

avr_ready:
                clc
                rts

reset:
                lda via+12
                and #$1f
                ora #$e0        ;CB2=1
                jsr reset2

                lda via+12
                and #$1f
                ora #$C0        ;CB2=0
                jsr reset2

                lda via+12
                and #$1f
                ora #$e0        ;CB2=1
reset2:
                sta via+12
                lda #19
                jmp osbyte
                
                .pend

;-------------------------------------------------------------------------

recv_file_data_host_pagewise: .proc

                ; Receive data in 256-byte chunks, then receive any
                ; stragglers.

                jsr fix_up_packet_size_for_pagewise_transfer
                bcc last_page

num_unrolls=4
                .cerror 256%num_unrolls!=0,"no"
                
first_pages:
                ldy #0
one_page_loop:
                .rept num_unrolls
                
                sta via+0

-
                lda via+13
                and #$10
                beq -

                lda via+0
                sta (payload_addr),y

                iny

                .next
                
                bne one_page_loop

                inc payload_addr+1
                
                inc payload_counter+1
                bne one_page_loop
                inc payload_counter+2
                bne one_page_loop
                inc payload_counter+3
                bne one_page_loop

last_page:
                ldx payload_counter+0
                beq done
                
                ldy #0
last_page_loop:
                sta via+0

-
                lda via+13
                and #$10
                beq -

                lda via+0
                sta (payload_addr),y

                iny
                inx
                bne last_page_loop

                ; ldx #payload_addr
                ; jsr addyz16
done:
                
                rts
                .pend
                
;-------------------------------------------------------------------------

recv_file_data_parasite_pagewise: .proc

                jsr claim_tube

                jsr fix_up_packet_size_for_pagewise_transfer
                bcc last_page

first_pages:
                ldx #<payload_addr
                ldy #>payload_addr
                lda #tube_256_byte_host_to_parasite
                jsr $406

num_unrolls=2
                .cerror 256%num_unrolls!=0,"no"
                
                ; The recv case is naturally slower than the send
                ; case, so there's no gap to put the iny in. It's
                ; quicker to divide the counter by the number of
                ; unrolls.
                
                ldy #(256/num_unrolls)&$ff

                ; inter-byte delay is 10 uS, or 20 cycles

                lda #$10        ;VIA IFR mask

one_page_loop:

                .rept num_unrolls
                
                stx via+0       ;+6 = 6

-
                bit via+13       ;+6 = 12
                beq -           ;+2 = 14

                ldx via+0       ;+6 = 20
                stx $fee5       ;+4 = 24 | +0

                .next

                dey
                bne one_page_loop

                inc payload_addr+1
                bne +
                inc payload_addr+2
                bne +
                inc payload_addr+3
+

                inc payload_counter+1
                bne first_pages
                inc payload_counter+2
                bne first_pages
                inc payload_counter+3
                bne first_pages

last_page:
                lda payload_counter+0
                beq done

                ldx #<payload_addr
                ldy #>payload_addr
                lda #tube_multi_byte_host_to_parasite
                jsr $406

                ldx payload_counter+0

                ; inter-byte delay is 24 uS, or 48 cycles

                lda #$10        ;IFR mask
                
last_page_loop:
                stx via+0       ;+6 = 11
-
                bit via+13      ;+6 = 17
                beq -           ;+2 = 19

                ldy via+0       ;+6 = 25

                jsr delay_12_cycles ;+12 = 37

                bit $ff         ;+3 = 40

                nop             ;+2 = 42
                nop             ;+2 = 44

                sty $fee5       ;+4 = 48 | +0 = 0

                inx                ;+2 = 2
                bne last_page_loop ;+3 = 5
                
done:
                jsr release_tube
                
                rts
                .pend
                
;-------------------------------------------------------------------------
;
; Send file data from parasite memory, using the 256-byte Tube
; transfer mode when possible.
; 
send_file_data_parasite_pagewise: .proc

                jsr claim_tube

                jsr fix_up_packet_size_for_pagewise_transfer
                bcc last_page

first_pages:
                ldx #<payload_addr
                ldy #>payload_addr
                lda #tube_256_byte_parasite_to_host
                jsr $406

                ; initial delay is 19 uS, or 38 cycles
                jsr delay_36_cycles
                nop

num_unrolls=4
                
                ldy #0
                lda #$10     ;VIA IFR mask
                ; inter-byte delay is 10 uS, or 20 cycles
one_page_loop:

                .rept num_unrolls
                
                ldx $fee5       ;+20 | +0
                stx via+0       ;+6
-
                bit via+13      ;+12
                beq -           ;+14

                ; There needs to be a 2-cycle delay here anyway, so no
                ; point dividing the counter by the number of unrolls.
                iny             ;+16

                .next

                bne one_page_loop
                ;bne one_page_loop ;+19

                inc payload_addr+1
                bne +
                inc payload_addr+2
                bne +
                inc payload_addr+3
+

                inc payload_counter+1
                bne first_pages
                inc payload_counter+2
                bne first_pages
                inc payload_counter+3
                bne first_pages

last_page:
                lda payload_counter+0
                beq done

                ldx #<payload_addr
                ldy #>payload_addr
                lda #tube_multi_byte_parasite_to_host
                jsr $406

                ; initial delay is 24 uS, or 48 cycles
                jsr delay_48_cycles

                ldy #0
                ldx payload_counter+0
                
                ; inter-byte delay is 24 uS, or 48 cycles
last_page_loop:
                lda $fee5       ;48 | 0
                sta via+0       ;6
-
                lda via+13      ;12
                and #$10        ;14
                beq -           ;16

                jsr delay_12_cycles ;28

                nop             ;30
                nop             ;32
                nop             ;34
                nop             ;36
                bit $ff         ;39

                inx             ;41

                bne last_page_loop ;44

done:
                jsr release_tube
                rts
                .pend

;-------------------------------------------------------------------------
;
; Send file data from host memory, with a faster path for sending
; 256-byte chunks when possible.
;
send_file_data_host_pagewise: .proc

                jsr fix_up_packet_size_for_pagewise_transfer
                bcc last_page

num_unrolls=2
                .cerror 256%num_unrolls!=0,"no"
                
first_pages:
                ldy #0
                
one_page_loop:

                .rept num_unrolls
                
                lda (payload_addr),y
                sta via+0

                lda #$10
-
                bit via+13
                beq -
                
                iny

                .next
                
                bne one_page_loop

                inc payload_addr+1

                inc payload_counter+1
                bne one_page_loop
                inc payload_counter+2
                bne one_page_loop
                inc payload_counter+2

last_page:
                ldx payload_counter+0
                beq done

                ldy #0
last_page_loop:
                lda (payload_addr),y
                sta via+0
-
                lda via+13
                and #$10
                beq -

                iny
                inx
                bne last_page_loop

done:
                rts
                .pend
                
;-------------------------------------------------------------------------
;
; Fix up the packet size for a pagewise transfer. The result makes no
; real sense, it's just convenient for the calling code.
;
; entry: !scratch_p_size = negated packet size
; exit: ?scratch_p_size is negated number of bytes (possibly 0) to
;       transfer in the final loop
;       C=0 if there are 0 whole pages to transfer
;       C=1 if there are >=1 whole pages to transfer. The negated
;           page count is in scratch_p_size+1..3 (a 24-bit value).
;
fix_up_packet_size_for_pagewise_transfer: .proc
                ldy payload_counter+0

                jsr negate_payload_counter
                
                lda payload_counter+1
                ora payload_counter+2
                ora payload_counter+3
                beq no_pages

some_pages:
                lda #0
                sta payload_counter+0
                jsr negate_payload_counter
                sty payload_counter+0
                sec
                rts

no_pages:
                sty payload_counter+0
                clc
                rts


                
                jsr negate_payload_counter
                pla
                rts
                .pend

;-------------------------------------------------------------------------

nop:
                rts

;-------------------------------------------------------------------------

                .bend

;-------------------------------------------------------------------------

; Link interface.

link_beeb_name="AVR "..format("%04x",avr.via)
link_begin_send_without_restart=avr.begin_send
link_begin_send_with_restart=avr.begin_send
link_send_payload_byte=avr.send_byte
link_begin_recv=avr.begin_recv
link_recv_payload_byte=avr.recv_byte
link_unprepare=avr.via_unprepare
link_startup=avr.link_startup
link_status_text=avr.status_text
link_send_file_data_parasite=avr.send_file_data_parasite_pagewise
link_send_file_data_host=avr.send_file_data_host_pagewise
link_recv_file_data_parasite=avr.recv_file_data_parasite_pagewise
link_recv_file_data_host=avr.recv_file_data_host_pagewise
link_num_speedtest_iterations=10
